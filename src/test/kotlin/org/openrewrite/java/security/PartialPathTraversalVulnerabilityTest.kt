/*
 * Copyright 2022 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.security

import org.junit.jupiter.api.Test
import org.openrewrite.Recipe
import org.openrewrite.java.JavaRecipeTest

class PartialPathTraversalVulnerabilityTest: JavaRecipeTest {
    override val recipe: Recipe
        get() = PartialPathTraversalVulnerability()

    /**
     * [ESAPI Vulnerability Fix](https://github.com/ESAPI/esapi-java-legacy/commit/a0d67b75593878b1b6e39e2acc1773b3effedb2a)
     */
    @Test
    fun `ESAPI CVE-2022-23457 example`() = assertChanged(
        before = """
        import java.io.File;
        import java.io.UncheckedIOException;

        class A {
            void foo(File dir, File parent) {
                if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath())) {
                    throw new UncheckedIOException("Invalid directory: " + dir.getCanonicalPath());
                }
            }
        }
        """,
        after = """
        import java.io.File;
        import java.io.UncheckedIOException;

        class A {
            void foo(File dir, File parent) {
                if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                    throw new UncheckedIOException("Invalid directory: " + dir.getCanonicalPath());
                }
            }
        }
        """
    )

    @Test
    fun `parentheses wrapped call chain`() = assertChanged(
        before = """
        import java.io.File;

        class A {
            void foo(File dir, File parent) {
                (dir.getCanonicalPath()).startsWith((parent.getCanonicalPath()));
            }
        }
        """,
        after = """
        import java.io.File;

        class A {
            void foo(File dir, File parent) {
                dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath());
            }
        }
        """
    )

    @Test
    fun `startsWith on String call`() = assertUnchanged(
        before = """
        import java.io.File;

        class A {
            void foo(File dir, File parent) {
                dir.getCanonicalPath();
                if ("potato".startsWith(parent.getCanonicalPath())) {
                    System.out.println("Hello!");
                }
            }
        }
        """
    )
}
